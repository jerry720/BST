Predecessor

The predessor of a node is the LARGEST ITEM in the set of items SMALLER THAN the current node.

For example, for the set {4, 3, 5, 7, 2, 1, 6}
- To find the predecessor of 6 (e.g.)
- First sort the number set {1, 2, 3, 4, 5, 6, 7}
- In this case, the predecessor of 6 is the number that comes immediately before 6, which is 5

In a binary tree
		4		-->	root node
	      /   \
	    2       6   	-->	internal nodes
	   / \     / \
	  1   3   5   7 	-->	leaf nodes

To find the predecessor of a node in a Binary Search Tree, find the left subtree of the node and get the largest item. As an algorithm, we are finding the max element in the node's subtree. Using the previous example, to find the predecessor or 6, access the left subtree and obtain the largest value. There is only 1 item in the left subtree so the predecessor of 6 is 5.


However if we are finding the predecessor of 5 (a leaf node):
- There is no left subtree to access
- We look for the first ancestor node to the LEFT of 5, which in this case is 4
	 _________
	|	 4|
	|      /  | \
	|    2    |   6   (* The box indicates all nodes left of 5)
	|   / \   |  / \
	|  1   3  | 5   7
	 ---------
- Therefore the algorithm should traceback the BST to a parent reference (note that a parent reference is not necessarily a predecessor)
- Arriving at the ancestor: 6
- Keep tracing back using the parent reference until the predecessor is reached, in this case 4

(Note that this method only works if we have parent references)
In the cases that we don't, we start from the root node and work down the tree.